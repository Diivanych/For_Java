import java.util.*;

public class Main {

    public static void main(String[] args) {
        Map<String , String>  passportData = new HashMap<>();
        passportData.put("123456","Ivanov");
        passportData.put("567898","Ivanov");
        passportData.put("345678","Emelyanenko");
        passportData.put("450982","Petrova");
        passportData.put("365478","Vasiliev");
        passportData.put("786564","Ivanov");
        passportData.put("456789","Sidorov");
        String searchLastName = "Ivanov";
        for(Map.Entry<String, String> entry: passportData.entrySet()){
            String passportNumber = entry.getKey();
            String lastName = entry.getValue();
            if (lastName.equals(searchLastName)){
                System.out.println(passportNumber + " lastName is " + lastName);
            }
        }


    }

}

20:29


<aside>
üìî –î–∞–Ω—ã 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏ –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç. –°—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã, –µ—Å–ª–∏ –æ–¥–Ω—É –±—É–∫–≤—É –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ, –ø—Ä–∏ —ç—Ç–æ–º

1. –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä, add - egg –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã)
2. –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è, –∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–æ–π –∂–µ. (–ù–∞–ø—Ä–∏–º–µ—Ä, note - code)

–ü—Ä–∏–º–µ—Ä 1:

Input: s = "foo", t = "bar"

Output: false

–ü—Ä–∏–º–µ—Ä 2:

Input: s = "paper", t = "title"

Output: true

</aside>

==============================================================================






–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.

–ü—Ä–∏–º–µ—Ä 1: a+(d*3) - –∏—Å—Ç–∏–Ω–∞

–ü—Ä–∏–º–µ—Ä 2: [a+(1*3) - –ª–æ–∂—å

–ü—Ä–∏–º–µ—Ä 3: [6+(3*3)] - –∏—Å—Ç–∏–Ω–∞

–ü—Ä–∏–º–µ—Ä 4: {a}[+]{(d*3)} - –∏—Å—Ç–∏–Ω–∞

–ü—Ä–∏–º–µ—Ä 5: <{a}+{(d*3)}> - –∏—Å—Ç–∏–Ω–∞

–ü—Ä–∏–º–µ—Ä 6: {a+]}{(d*3)} - –ª–æ–∂—å






–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–µ–¥–µ—Ç —á–∏—Å–ª–æ –∏–∑ —Ä–∏–º—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –≤ –∞—Ä–∞–±—Å–∫–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, MMXXII = 2022





=======================================================================================


–ò–∑–æ–º–æ—Ä—Ñ–Ω–æ—Å—Ç—å - —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–≤—É—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ —Å–∏—Å—Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Ñ–æ—Ä–º—É –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –Ω–æ –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.

–í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∫, –∏–∑–æ–º–æ—Ä—Ñ–Ω–æ—Å—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ —Å —Ü–µ–ª—å—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ª–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥—É—é –ø—É—Ç–µ–º –∑–∞–º–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ —à–∞–±–ª–æ–Ω —Å–∏–º–≤–æ–ª–æ–≤.

–ü—Ä–∞–≤–∏–ª–∞ –∏–∑–æ–º–æ—Ä—Ñ–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ –æ–±—ã—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Å–∏–º–≤–æ–ª –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ —Å–∏–º–≤–æ–ª 'a' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã, —Ç–æ –∏ –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ —Å–∏–º–≤–æ–ª, –∑–∞–º–µ–Ω—è—é—â–∏–π 'a', –¥–æ–ª–∂–µ–Ω —Ç–∞–∫–∂–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –¥–≤–∞–∂–¥—ã.

–†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–∏–º–≤–æ–ª 'a' –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Å–∏–º–≤–æ–ª 'b' –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ.

–ò–∑–æ–º–æ—Ä—Ñ–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã. –ì–ª–∞–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ - —Å–∏–º–≤–æ–ª—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.

–ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã—Ö —Å—Ç—Ä–æ–∫:

"add" –∏ "egg"
"paper" –∏ "title"
–í –æ–±–æ–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω–æ—Å—Ç–∏.



=====================================================================



for (int i = 0; i < s.length(); i++) {
            char sChar = s.charAt(i);
            char tChar = t.charAt(i);

            if (map.containsKey(sChar)) {
                if (map.get(sChar) != tChar) {
                    return false;
                }
            } else {
                if (usedCharacters.contains(tChar)) {
                    return false;
                }
                map.put(sChar, tChar);
                usedCharacters.add(tChar);
            }
        }






============================================================






private static boolean isIsomorphic(String s, String t) {
//            if (s.length() != t.length()) {
//                return false;
//            }
//
//            Map<Character, Character> map = new HashMap<>();
//            Set<Character> usedCharacters = new HashSet<>();
//
//            for (int i = 0; i < s.length(); i++) {
//                char sChar = s.charAt(i);
//                char tChar = t.charAt(i);
//
//                if (map.containsKey(sChar)) {
//                    if (map.get(sChar) != tChar) {
//                        return false;
//                    }
//                } else {
//                    if (usedCharacters.contains(tChar)) {
//                        return false;
//                    }
//                    map.put(sChar, tChar);
//                    usedCharacters.add(tChar);
//                }
//            }
//
//            return true;
//        }

21:01



=====================================================================




private static boolean checkBrackets(String expression) {
        Stack<Character> stack = new Stack<>();

        for (char c : expression.toCharArray()) {
            if (isOpenBracket(c)) {
                stack.push(c);
            } else if (isCloseBracket(c)) {
                if (stack.isEmpty() || !isMatchingBracket(stack.pop(), c)) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }

    private static boolean isOpenBracket(char c) {
        return c == '(' || c == '[' || c == '{' || c == '<';
    }

    private static boolean isCloseBracket(char c) {
        return c == ')' || c == ']' || c == '}' || c == '>';
    }

    private static boolean isMatchingBracket(char open, char close) {
        return (open == '(' && close == ')') ||
                (open == '[' && close == ']') ||
                (open == '{' && close == '}') ||
                (open == '<' && close == '>');
    }




=========================================================================





–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –ø–æ–º–æ—â—å—é HashMap.
–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—á–∏—Ç–∞—Ç—å, –∫–∞–∫ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏. –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.






